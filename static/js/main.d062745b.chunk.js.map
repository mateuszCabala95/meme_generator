{"version":3,"sources":["components/MemeGenerator/MemeGenerator.module.scss","components/Header/Header.module.scss","App.module.scss","components/Header/Header.js","components/MemeGenerator/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","styles","header","logo","src","alt","text","MemeGenerator","state","topText","bottomText","randomImageURL","allMemeImgs","handleChange","e","target","value","name","setState","handleSubmit","preventDefault","randomMemeImg","randomIndex","Math","floor","random","length","url","handleClick","fetch","then","res","json","data","memes","this","memeContainer","onSubmit","flexContainer","input","type","placeholder","onChange","id","button","onClick","image","imageMem","React","Component","App","body","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,cAAgB,qCAAqC,cAAgB,qCAAqC,MAAQ,6BAA6B,OAAS,8BAA8B,MAAQ,6BAA6B,QAAU,+BAA+B,SAAW,gCAAgC,WAAa,oC,qBCA9UD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,KAAO,uB,kBCArFD,EAAOC,QAAU,CAAC,KAAO,oB,4MCiBVC,EAdA,WAEX,OACI,4BAAQC,UAAWC,IAAOC,QACtB,yBAAKF,UAAWC,IAAOE,KACnBC,IAAI,iEACJC,IAAI,aAER,uBAAGL,UAAWC,IAAOK,MAArB,oB,wBC0EGC,E,2MA/EXC,MAAQ,CACJC,QAAS,GACTC,WAAY,GACZC,eAAgB,gCAChBC,YAAa,I,EAejBC,aAAe,SAACC,GAAO,IAAD,EACIA,EAAEC,OAAjBC,EADW,EACXA,MAAOC,EADI,EACJA,KAEd,EAAKC,SAAL,eACKD,EAAOD,K,EAMhBG,aAAe,SAACL,GAAD,OAAOA,EAAEM,kB,EAExBC,cAAgB,WACZ,IAAMC,EAAcC,KAAKC,MAAMD,KAAKE,SAAW,EAAKjB,MAAMI,YAAYc,QACtE,EAAKR,SAAS,CACVP,eAAe,EAAKH,MAAMI,YAAYU,GAAaK,O,EAI3DC,YAAc,kBAAK,EAAKP,iB,mFA9BH,IAAD,OAChBQ,MAbI,qCAcCC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAS,IACJC,EAASD,EAAKA,KAAdC,MACP,EAAKhB,SAAS,CACVN,YAAasB,S,+BA0BnB,IAAD,EACyBC,KAAK3B,MAA5BC,EADF,EACEA,QAASC,EADX,EACWA,WAEhB,OACI,yBAAKV,UAAWC,IAAOmC,eACnB,0BAAMC,SAAUF,KAAKhB,aAAcnB,UAAWC,IAAOqC,eACjD,2BACItC,UAAWC,IAAOsC,MAClBC,KAAK,OACLxB,MAAOP,EACPQ,KAAK,UACLwB,YAAY,aACZC,SAAUP,KAAKtB,eAGnB,2BACIb,UAAWC,IAAOsC,MAClBC,KAAK,OACLG,GAAG,aACH3B,MAAON,EACPO,KAAK,aACLwB,YAAY,gBACZC,SAAUP,KAAKtB,eAGnB,4BAAQb,UAAWC,IAAO2C,OAAQC,QAASV,KAAKP,aAAhD,aAGJ,yBAAK5B,UAAWC,IAAO6C,OACnB,yBAAK9C,UAAWC,IAAO8C,SAAU3C,IAAK+B,KAAK3B,MAAMG,eAAgBN,IAAI,KACrE,wBAAIL,UAAWC,IAAOQ,SAAU0B,KAAK3B,MAAMC,SAC3C,wBAAIT,UAAWC,IAAOS,YAAayB,KAAK3B,MAAME,kB,GAxEtCsC,IAAMC,WCWnBC,E,iLAVP,OACI,yBAAKlD,UAAWC,IAAOkD,MACnB,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALEH,IAAMC,WCOJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.d062745b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"memeContainer\":\"MemeGenerator_memeContainer__3zfae\",\"flexContainer\":\"MemeGenerator_flexContainer__1VMjN\",\"input\":\"MemeGenerator_input__i6UEG\",\"button\":\"MemeGenerator_button__jFWym\",\"image\":\"MemeGenerator_image__10NfQ\",\"topText\":\"MemeGenerator_topText__3952N\",\"imageMem\":\"MemeGenerator_imageMem__2OLQd\",\"bottomText\":\"MemeGenerator_bottomText__20erm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3ZrIH\",\"logo\":\"Header_logo__3zFJ1\",\"text\":\"Header_text__2kNMI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__30CwH\"};","import React from \"react\";\r\nimport styles from './Header.module.scss';\r\n\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <header className={styles.header}>\r\n            <img className={styles.logo}\r\n                src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\r\n                alt=\"Problem?\"\r\n            />\r\n            <p className={styles.text}>Meme generator</p>\r\n        </header>\r\n    )\r\n};\r\n\r\n\r\nexport default Header;","import React from \"react\";\r\nimport styles from './MemeGenerator.module.scss'\r\n\r\nconst API = 'https://api.imgflip.com/get_memes';\r\n\r\n\r\nclass MemeGenerator extends React.Component {\r\n    state = {\r\n        topText: '',\r\n        bottomText: '',\r\n        randomImageURL: 'http://i.imgflip.com/1bij.jpg',\r\n        allMemeImgs: [],\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        fetch(API)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                const {memes} = data.data;\r\n                this.setState({\r\n                    allMemeImgs: memes,\r\n                })\r\n            })\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {value, name} = e.target;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n\r\n\r\n    };\r\n\r\n    handleSubmit = (e) => e.preventDefault();\r\n\r\n    randomMemeImg = () => {\r\n        const randomIndex = Math.floor(Math.random() * this.state.allMemeImgs.length);\r\n        this.setState({\r\n            randomImageURL:this.state.allMemeImgs[randomIndex].url,\r\n        })\r\n    };\r\n\r\n    handleClick = ()=> this.randomMemeImg();\r\n\r\n    render() {\r\n        const {topText, bottomText} = this.state;\r\n\r\n        return (\r\n            <div className={styles.memeContainer}>\r\n                <form onSubmit={this.handleSubmit} className={styles.flexContainer}>\r\n                    <input\r\n                        className={styles.input}\r\n                        type=\"text\"\r\n                        value={topText}\r\n                        name='topText'\r\n                        placeholder='  Top Text'\r\n                        onChange={this.handleChange}\r\n                    />\r\n\r\n                    <input\r\n                        className={styles.input}\r\n                        type=\"text\"\r\n                        id='bottomText'\r\n                        value={bottomText}\r\n                        name='bottomText'\r\n                        placeholder='  Bottom Text'\r\n                        onChange={this.handleChange}\r\n                    />\r\n\r\n                    <button className={styles.button} onClick={this.handleClick}>Generate</button>\r\n                </form>\r\n\r\n                <div className={styles.image}>\r\n                    <img className={styles.imageMem} src={this.state.randomImageURL} alt=\"\"/>\r\n                    <h2 className={styles.topText}>{this.state.topText}</h2>\r\n                    <h2 className={styles.bottomText}>{this.state.bottomText}</h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MemeGenerator","import React from 'react';\nimport styles from './App.module.scss'\nimport Header from \"./components/Header/Header\";\nimport MemeGenerator from \"./components/MemeGenerator/MemeGenerator\";\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className={styles.body}>\n                <Header/>\n                <MemeGenerator />\n            </div>\n        );\n\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"ContentCard is cached for offline use.\" message.\n              console.log('ContentCard is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}